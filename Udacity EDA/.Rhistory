pkgs <- c('reshape2', 'plyr', 'ggplot2', 'dplyr', 'data.table', 'Lahman')
install.packages(pkgs)
pew <- read.delim(
file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE,
stringsAsFactors = FALSE,
check.names = F
)
head(pew)
head(pew)
dim(pew)
pew
tb <- read.csv(
file = "http://stat405.had.co.nz/data/tb.csv",
header = TRUE,
stringsAsFactors = FALSE
)
tb
head(tv)
head(tb)
weather <- read.delim(
file = "http://stat405.had.co.nz/data/weather.txt",
stringsAsFactors = FALSE
)
head(weather)
library(reshape2)
pew_tidy <- melt(
data = pew,
id = "religion",
variable.name = "income",
value.name = "frequency"
)
head(pew_tidy)
head(pew)
tail(pew_tidy)
head(tb)
tb$new_sp = NULL
names(tb) <- gsub("new_sp_", "", names(tb))
head(tb)
?melt
tb_tidy <- melt(
data = tb,
id = c("iso2", "year"),
variable.name = "gender_age",
value.name = "cases",
na.rm = TRUE
)
head(tb_tidy)
library(plyr)
tb_tidy <- mutate(tb_tidy,
gender = sub("^([m|f])(.*)$", "\\1", gender_age),
age = sub("^([m|f])(.*)$", "\\2", gender_age),
gender_age = NULL
)
head(tb_tidy)
tb_tidy <- tb_tidy[c('iso2', 'year', 'gender', 'age', 'cases')]
head(tb_tidy)
?mutate
head(weather)
?melt
weather_tidy <- melt()
weather_tidy <- melt(
data = weather,
)
head(weather_tidy)
weather_tidy <- melt(
data = weather,
id = c("id", "year", "month"),
variable.name = "element",
value.name = "d"
)
head(weather_tidy)
head(weather)
weather_tidy <- melt(
data = weather,
id = c("id", "year", "month", "element"),
variable.name = "d",
value.name = "frequency"
)
head(weather_tidy)
weather_tidy <- melt(
data = weather,
id = c("id", "year", "month", "element"),
variable.name = "d",
value.name = "frequency"
)
weather_tidy <- melt(
data = weather,
id = c("id", "year", "month", "element"),
variable.name = "d",
value.name = "frequency",
na.rm = TRUE
)
head(weather_tidy)
weather_tidy <- melt(
data = weather,
id = 1:4,
variable.name = "day",
value.name = "temparature",
na.rm = TRUE
)
head(weather_tidy)
weather_tidy <- mutate(weather_tidy,
day = sub("^d", "", day)
)
head(weather_tidy)
?dcast
weather_tidy2 <- dcast(
data = weather_tidy,
formula = id + year + month + day ~ element,
value.var = "temparature"
)
head(weather_tidy2)
billboards <- read.csv(
file = "http://stat405.had.co.nz/data/billboard.csv",
stringsAsFactors = FALSE
)
head(billboards)
names(billboards) <- gsub("\\.", "_", names(billboards))
head(billboards)
billboards <- mutate(billboards,
artist_inverted = iconv(artist_inverted, "MAC", "UTF-8"),
)
head(billboards)
billboards_tidy <- melt(billboards,
id = 1:7,
variable.name = "week",
value.name = "rank",
na.rm = TRUE
)
head(billboards_tidy)
billboards_tidy <- mutate(billboards_tidy,
week = as.numeric(gsub("^x([[:digit:]]+).*", "\\1", week))
)
head(billboards_tidy)
library(dplyr)
library(hflights)
install.packages("hflights")
library(hflights)
?data
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights
data.frame(head(flights))
str(flights)
filter(flights, Month==1, DayofMonth==1)
flights[flights$Month==1 & flights$DayofMonth==1, ]
filter(flights, UniqueCarrier %in% c("AA", "UA"))
select(flights, DepTime, Arrtime, FlightNum)
select(flights, DepTime, ArrTime, FlightNum)
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(Distance, Airtime) %>%
mutate(Speed = Distance/AirTime*60)
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60)
flights <- flights %>% mutate(Speed = Distance/AirTime * 60)
flights
select(flights, speed)
select(flights, Speed)
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm = TRUE))
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(.,na.rm=TRUE)), matches("Delay"))
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count))
flights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
flights %>%
group_by(Dest) %>%
select(Cancelled) $>$
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table %>%
head()
flights %>%
group_by(Dest) %>%
select(Cancelled)
flights %>%
group_by(Dest)
flights %>%
group_by(Year)
flights %>%
group_by(Dest)
flights %>%
group_by(Dest) %>%
summarise(Cancelled)
flights %>%
group_by(Dest) %>%
summarise(cancelled_count = sum(Cancelled))
flights %>%
summarise(cancelled_count = sum(Cancelled))
flights %>%
group_by(Dest) %>%
summarise(cancelled_count = sum(Cancelled)) %>%
arrange(desc(cancelled_count))
?table
flights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
filter(min_rank(desc(DepDelay)) <= 2) %>%
arrange(UniqueCarrier, desc(DepDelay))
flights %>%
group_by(Month) %>%
summarise(flight_count = n()) %>%
mutate(change = flight_count - lag(flight_count))
flights %>%
group_by(Month) %>%
tally() %>%
mutate(change = n - lag(n))
flights %>% sample_n(5)
str(flights)
glimpse(flights)
rm(flights)
install.packages(nycflights13)
install.packages("nycflights13")
suprressMessages(library(dplyr))
suppressMessages(library(dplyr))
library(nycflights13)
flights
setwd("C:/Udacity EDA/")
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
head(pf)
```
***
### Histogram of Users' Birthdays
Notes:
```{r Histogram of Users\' Birthdays}
install.packages('ggplot2')
names(pf)
qplot(x = dob_day, data = pf) +
```
***
Response:
***
### Moira's Investigation
Notes:
***
### Estimating Your Audience Size
Notes:
***
#### Think about a time when you posted a specific message or shared a photo on Facebook. What was it?
Response:
Response:
#### Think about what percent of your friends on Facebook see any posts or comments that you make in a month. What percent do you think that is?
Response:
***
### Perceived Audience Size
Notes:
***
### Faceting
Notes:
```{r Faceting}
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks=1:31) +
facet_wrap(~dob_month, ncol = 3)
```
#### Letâs take another look at our plot. What stands out to you here?
Response:
***
#### How many of your friends do you think saw that post?
scale_x_discrete(breaks=1:31)
#### What are some things that you notice about this histogram?
library(ggplot2)
### Be Skeptical - Outliers and Anomalies
Notes:
***
### Moira's Outlier
#### Which case do you think applies to Moiraâs outlier?
Notes:
Response:
***
### Friend Count
Notes:
#### What code would you enter to create a histogram of friend counts?
```{r Friend Count}
qplot(x = friend_count, data =)
```
#### How is this plot similar to Moira's first plot?
Response:
***
### Limiting the Axes
Notes:
```{r Limiting the Axes}
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
qplot(x = friend_count, data = pf) + scale_x_continuous(limits = c(0,1000))
```
### Exploring with Bin Width
Notes:
***
### Adjusting the Bin Width
Notes:
```{r Limiting the Axes}
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 2)
```
### Faceting Friend Count
```{r Faceting Friend Count}
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 2)
```
***
### Omitting NA Values
Notes:
```{r Omitting NA Values}
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +
facet_wrap(~gender, ncol = 2)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50)) +
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
```{r Frequency Polygons}
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
qplot(x = friend_count, y = ..count../sum(..count..), data = subset(pf, !is.na(gender)), binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
names(pf)
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous()
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 2000))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 750))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 500))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 200))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
scale_x_continuous(limits = c(0, 100))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 100))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 50))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 30))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 20))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 15))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 5))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 5))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 100))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 500))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 50))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 30))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 20))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_continuous(limits = c(0, 10))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_log10(limits = c(0, 1000))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_log10(limits = c(0, 1000))
qplot(x = www_likes, y = ..count../sum(..count..), data = subset(pf, !is.na(www_likes)), geom = 'freqpoly', color = gender, binwidth = 1) +
scale_x_log10()
names(pf)
by(pf$gender, pf$www_likes, summary)
by(pf$www_likes, pf$gender, summary)
subset(pf, pf$gender=male)$www_likes
subset(pf, pf$gender==male)$www_likes
subset(pf, pf$gender=="male")$www_likes
sum(subset(pf, pf$gender=="male")$www_likes)
sum(subset(pf, pf$gender=="female")$www_likes)
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot')
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot', limits = c(0, 1000))
?qplot
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot', ylim = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(pf, !is.na(gender)), geom = 'boxplot') +
coord_cartesian(ylim = c(0,1000))
by(pf$friend_count, pf$gender, summary)
names(pf)
by(pf$friendships_initiated, pf$gender, summary)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_check_in)[1]
summary(pf$mobile_check_in)[2] / dim(pf$mobile_check_in)[1]
summary(pf$mobile_check_in)[2]
dim(pf%mobile_check_in)[1]
dim(pf$mobile_check_in)[1]
dim(pf$mobile_check_in)
length(pf$mobile_check_in)
summary(pf$mobile_check_in)[2]/length(pf$mobile_check_in)
